include "globals.mzn";
include "ls-annotation.mzn";
include "data.mzn";

int: nItems;
set of int: ITEMS;
set of int: BINS;
set of int: COLORS ;
set of int: CAPACITIES ;

array [CAPACITIES] of int: capacities;
array [ITEMS] of int: size;
array [ITEMS] of COLORS: color;
int: maxCapa = max(capacities);

array [BINS] of var 0..maxCapa: load;
array [ITEMS] of var BINS: placed_in;
constraint bin_packing_load(load,placed_in,size);

% array [BINS,COLORS] of var 0..1: contains_color;

% constraint forall(b in BINS, c in COLORS)(
%   contains_color[b,c] = exists(i in ITEMS)(placed_in[i] = b /\ color[i] = c) 
% );

% constraint forall(i in ITEMS)(
%   contains_color[placed_in[i],color[i]] = 1
% );

% array [BINS] of var int: num_colors =
% 	[sum([contains_color[b,c] | c in COLORS]) | b in BINS];
% constraint forall(b in BINS)(num_colors[b] <= 2);

int: maxColors = 2;
array[BINS] of var 0..maxColors: num_colors;
constraint forall(b in BINS)(num_colors[b] = nvalue([(placed_in[i] = b)*color[i] | i in ITEMS])-1);

array[0..maxCapa] of 0..maxCapa: slack =
  array1d(0..maxCapa,[min([s | s in capacities++[0] where s >= x]) - x | x in 0..maxCapa]);

var int: objective;
constraint objective = sum(i in BINS)(slack[load[i]]);

solve 
:: neighbourhood_and([hard_packing(placed_in)]) 
minimize objective;

function ann: binpacking(array [int] of var int: placed) :: neighbourhood_definition =
initialize(
forall(i in ITEMS)( placed[i] = i) /\
forall(b in BINS)(num_colors[b] <= 2 )
)
/\
from(i, j in ITEMS where i<j /\ placed[i] != placed[j] /\ (size[i] != size[j] \/ color[i] != color[j]) /\ (slack[load[placed[i]]] > 0 \/ slack[load[placed[j]]] > 0 ))
      (placed[i] :=: placed[j] /\
      ensure(forall(b in BINS)(num_colors[b] <= maxColors))
      )
\/
from(i in ITEMS, b in BINS where placed[i] != b /\ slack[load[placed[i]]] > 0 
/\ (load[b]>0 \/ int_eq(b, min([(load[i] == 0)*i | i in BINS ]))) /\ size[i]+load[b] <= maxCapa)(
    placed[i] := b/\
      ensure(forall(b in BINS)(num_colors[b] <= 2))
)
;

function ann: hard_packing(array [int] of var int: placed) :: neighbourhood_definition =
initialize(
forall(i in ITEMS)( int_eq(placed[i], i)) /\
forall(b in BINS)(num_colors[b] <= 2 )
)
/\
from(i in ITEMS, b in BINS where slack[load[placed[i]]] > 0 
  %/\ placed[i] != b 
  %/\ (load[b]>0 \/ int_eq(b, min([(load[i] == 0)*i | i in BINS ]))) 
  /\ size[i]+load[b] <= maxCapa)
  (   
    placed[i] := b /\
    ensure(forall(b in BINS)(num_colors[b] <= 2))
);

function ann: soft_packing(array [int] of var int: placed) :: neighbourhood_definition =
initialize(
forall(i in ITEMS)( int_eq(placed[i], i)) /\
forall(b in BINS)(num_colors[b] <= 2 )
)
/\
from(i, j in ITEMS where i<j /\ placed[i] != placed[j] /\ (size[i] != size[j] \/ color[i] != color[j]) )
      (placed[i] :=: placed[j] )
\/
from(i in ITEMS, b in BINS where load[b]>0 /\ slack[load[placed[i]]] > 0 )(
    placed[i] := b 
);

